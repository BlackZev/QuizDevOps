name: CI/CD Backend

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write

jobs:
  build-and-push-backend:
    name: Build & Push Backend Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Build with Maven
        run: mvn clean package -DskipTests
        working-directory: ./backend
        
      - name: Rename JAR for Docker context
        run: |
          mkdir -p docker-context
          cp backend/target/*.jar docker-context/app.jar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: ./docker-context
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/java-backend:latest

  test-compose:
    name: Test Docker Compose
    runs-on: ubuntu-latest
    needs: build-and-push-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Create .env file
        run: |
          echo "DB_ROOT_USERNAME=${{ secrets.DB_ROOT_USERNAME }}" >> .env
          echo "DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env

      - name: Launch Docker Compose
        run: docker compose --env-file .env up -d --build

      - name: Wait and Verify Containers
        run: |
          sleep 20
          docker ps

      - name: Tear down
        if: always()
        run: docker compose --env-file .env down --volumes

      - name: Remove .env
        if: always()
        run: rm .env
